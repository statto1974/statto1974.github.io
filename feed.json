{
    "version": "https://jsonfeed.org/version/1",
    "title": "Toby Statham",
    "description": "",
    "home_page_url": "https://wutek.co.uk",
    "feed_url": "https://wutek.co.uk/feed.json",
    "user_comment": "",
    "author": {
        "name": "Toby Statham"
    },
    "items": [
        {
            "id": "https://wutek.co.uk/terms-and-conditions/",
            "url": "https://wutek.co.uk/terms-and-conditions/",
            "title": "Terms &amp; Conditions",
            "summary": "Terms and ConditionsLast updated: May 06, 2021 Please read these terms and conditions carefully before using Our Service. The words of which the initial letter&hellip;",
            "content_html": "<h1>Terms and Conditions</h1>\n<p>Last updated: May 06, 2021</p>\n<p>Please read these terms and conditions carefully before using Our Service.</p>\n<h1>Interpretation and Definitions</h1>\n<h2>Interpretation</h2>\n<p>The words of which the initial letter is capitalised have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.</p>\n<h2>Definitions</h2>\n<p>For the purposes of these Terms and Conditions:</p>\n<ul>\n<li>\n<p><strong>Affiliate</strong> means an entity that controls, is controlled by or is under common control with a party, where \"control\" means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.</p>\n</li>\n<li>\n<p><strong>Country</strong> refers to: United Kingdom</p>\n</li>\n<li>\n<p><strong>Company</strong> (referred to as either \"the Company\", \"We\", \"Us\" or \"Our\" in this Agreement) refers to Toby Statham.</p>\n</li>\n<li>\n<p><strong>Device</strong> means any device that can access the Service such as a computer, a cellphone or a digital tablet.</p>\n</li>\n<li>\n<p><strong>Service</strong> refers to the Website.</p>\n</li>\n<li>\n<p><strong>Terms and Conditions</strong> (also referred as \"Terms\") mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service. This Terms and Conditions agreement has been created with the help of the <a href=\"https://www.termsfeed.com/terms-conditions-generator/\" target=\"_blank\" rel=\"noopener\">Terms and Conditions Generator</a>.</p>\n</li>\n<li>\n<p><strong>Third-party Social Media Service</strong> means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.</p>\n</li>\n<li>\n<p><strong>Website</strong> refers to The Ramblings of Toby Statham, accessible from <a href=\"https://wutek.co.uk\" rel=\"external nofollow noopener\" target=\"_blank\">https://wutek.co.uk</a></p>\n</li>\n<li>\n<p><strong>You</strong> means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.</p>\n</li>\n</ul>\n<h1>Acknowledgement</h1>\n<p>These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service.</p>\n<p>Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service.</p>\n<p>By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service.</p>\n<p>You represent that you are over the age of 18. The Company does not permit those under 18 to use the Service.</p>\n<p>Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service.</p>\n<h1>Links to Other Websites</h1>\n<p>Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company.</p>\n<p>The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services.</p>\n<p>We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit.</p>\n<h1>Termination</h1>\n<p>We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions.</p>\n<p>Upon termination, Your right to use the Service will cease immediately.</p>\n<h1>Limitation of Liability</h1>\n<p>Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 0.01 GBP if You haven't purchased anything through the Service.</p>\n<p>To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose.</p>\n<p>Â </p>\n<h1>\"AS IS\" and \"AS AVAILABLE\" Disclaimer</h1>\n<p>The Service is provided to You \"AS IS\" and \"AS AVAILABLE\" and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licencors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchant-ability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected.</p>\n<p>Without limiting the foregoing, neither the Company nor any of the company's provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components.</p>\n<p>Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law.</p>\n<h1>Governing Law</h1>\n<p>The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws.</p>\n<h1>Disputes Resolution</h1>\n<p>If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company.</p>\n<h1>For European Union (EU) Users</h1>\n<p>If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which you are resident in.</p>\n<h1>United States Legal Compliance</h1>\n<p>You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a \"terrorist supporting\" country, and (ii) You are not listed on any United States government list of prohibited or restricted parties.</p>\n<h1>Severability and Waiver</h1>\n<h2>Severability</h2>\n<p>If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect.</p>\n<h2>Waiver</h2>\n<p>Except as provided herein, the failure to exercise a right or to require performance of an obligation under this Terms shall not effect a party's ability to exercise such right or require such performance at any time thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.</p>\n<h1>Translation Interpretation</h1>\n<p>These Terms and Conditions may have been translated if We have made them available to You on our Service. You agree that the original English text shall prevail in the case of a dispute.</p>\n<h1>Changes to These Terms and Conditions</h1>\n<p>We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion.</p>\n<p>By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service.</p>\n<h1>Contact Us</h1>\n<p>If you have any questions about these Terms and Conditions, You can contact us:</p>\n<ul>\n<li>By email: info@wutek.co.uk</li>\n</ul>",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
            ],
            "date_published": "2021-05-06T08:37:36+01:00",
            "date_modified": "2021-05-06T08:51:40+01:00"
        },
        {
            "id": "https://wutek.co.uk/about-me/",
            "url": "https://wutek.co.uk/about-me/",
            "title": "About Me",
            "summary": "My name is Toby Statham and I live in Brighton An experienced Microsoft 365 / SharePoint / Power Platform / Azure Specialist, with a proven&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://wutek.co.uk/media/posts/41//logo.jpg\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://wutek.co.uk/media/posts/41//responsive/logo-xs.jpg 300w ,https://wutek.co.uk/media/posts/41//responsive/logo-sm.jpg 480w ,https://wutek.co.uk/media/posts/41//responsive/logo-md.jpg 768w\"  alt=\"Toby &amp; ET\" width=\"400\" height=\"400\"></figure>\n<p>My name is Toby Statham and I live in Brighton</p>\n<p>An experienced <strong>Microsoft 365 / SharePoint / Power Platform / Azure Specialist</strong>, with a proven track record of directing corporate collaboration and process improvement projects â typically supporting design and development of solutions to realise business objectives.</p>\n<p>Key strengths include:</p>\n<ul>\n<li>Engaging with global business teams to gather requirements and understand processes; working with stakeholders across organisations to help understand and implement information management and governance best practices;</li>\n<li>Leading all stages of solution development, including requirements definition, design, development, architecture, testing and support;</li>\n<li>Migrating companies to the latest version of SharePoint and transitioning platforms into cloud with Microsoft 365 and Azure;</li>\n<li>Actively involved in the Microsoft 365, Power Platform, Azure and SharePoint communities, regularly attending conferences and user groups to expand knowledge.</li>\n</ul>",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
            ],
            "date_published": "2021-05-05T11:51:48+01:00",
            "date_modified": "2021-05-05T11:53:18+01:00"
        },
        {
            "id": "https://wutek.co.uk/enable-audience-targeting-using-script-or-code/",
            "url": "https://wutek.co.uk/enable-audience-targeting-using-script-or-code/",
            "title": "Enable Audience targeting using script or code",
            "summary": "Currently there are no direct methods to enable Audience Targeting on a List or Library via script or code. This is currently done through the&hellip;",
            "content_html": "<p>Currently there are no direct methods to enable <strong>Audience Targeting</strong> on a <strong>List</strong> or <strong>Library</strong> via script or code.</p>\n<p>This is currently done through the List or Library Settings screen under <strong>Audience targetting</strong> settings option</p>\n<p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://wutek.co.uk/media/posts/38/settings.jpg\" sizes=\"(max-width: 768px) 100vw, 768px\" srcset=\"https://wutek.co.uk/media/posts/38/responsive/settings-xs.jpg 300w ,https://wutek.co.uk/media/posts/38/responsive/settings-sm.jpg 480w ,https://wutek.co.uk/media/posts/38/responsive/settings-md.jpg 768w\"  alt=\"Image description\" width=\"990\" height=\"200\" /></figure></p>\n<p>When you enable audience targeting through these settings, a field is created in the corresponding <strong>List</strong> or <strong>Library</strong> called <strong>Target Audiences</strong></p>\n<p>Using the <code>Get-PnpField</code> PnP PowerShell command to get the <code>SchemaXml</code> property we can see how the field is constructed.</p>\n<pre><code class=\"language-ps\">(Get-PnPField -Identity &quot;Target Audiences&quot; -List Documents).SchemaXml</code></pre>\n<p>This is the XML returned</p>\n<pre><code class=\"language-xml\">\n&lt;Field \n  ID=&quot;{61cbb965-1e04-4273-b658-eedaa662f48d}&quot; \n  Type=&quot;TargetTo&quot; \n  Name=&quot;Target_x0020_Audiences&quot; \n  DisplayName=&quot;Target Audiences&quot; \n  Required=&quot;FALSE&quot; \n  SourceID=&quot;{803a362c-54fb-47c7-83c8-e7a83a9512f8}&quot; \n  StaticName=&quot;Target_x0020_Audiences&quot; \n  ColName=&quot;ntext2&quot; \n  RowOrdinal=&quot;0&quot; Version=&quot;2&quot;&gt;\n  &lt;Customization&gt;\n    &lt;ArrayOfProperty&gt;\n      &lt;Property&gt;\n        &lt;Name&gt;AllowGlobalAudience&lt;/Name&gt;\n        &lt;Value xmlns:q1=&quot;http://www.w3.org/2001/XMLSchema&quot; p4:type=&quot;q1:bo\nolean&quot; xmlns:p4=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;true&lt;/Value&gt;\n      &lt;/Property&gt;\n      &lt;Property&gt;\n        &lt;Name&gt;AllowDL&lt;/Name&gt;\n        &lt;Value xmlns:q2=&quot;http://www.w3.org/2001/XMLSchema&quot; p4:type=&quot;q2:boolean&quot; xmlns:p4=&quot;http://www.w\n3.org/2001/XMLSchema-instance&quot;&gt;true&lt;/Value&gt;\n      &lt;/Property&gt;\n      &lt;Property&gt;\n        &lt;Name&gt;AllowSPGroup&lt;/Name&gt;\n        &lt;Value xmlns:q3=&quot;http://www.w3.org/2001/XMLSchema&quot; p4:type=&quot;q3:boolean&quot; xmlns:p4=&quot;http://www.w3.org/2001/XMLSchema-ins\ntance&quot;&gt;true&lt;/Value&gt;\n      &lt;/Property&gt;\n    &lt;/ArrayOfProperty&gt;\n  &lt;/Customization&gt;\n&lt;/Field&gt;</code></pre>\n<p>After some experimenting, I found that the only two columns you need to set are the <code>ID</code> and <code>Type</code></p>\n<blockquote>\n<p><code>ID</code> needs to have <strong>61cbb965-1e04-4273-b658-eedaa662f48d</strong> set as itâs value</p>\n<p><code>Type</code> needs to have <strong>TargetTo</strong> set as itâs value</p>\n</blockquote>\n<p>You still need to provide values for <code>Name</code>, <code>DisplayName</code>, <code>StaticName</code>, but they can be whatever you want.</p>\n<p>Donât like the name <strong>Target Audiences</strong> then you can change it to something else. The great thing is, it can still be turned off through the List or Library settings page.</p>\n<p>To enable Audinence targeting using PnP PowerShell itâs as simple as running this script.</p>\n<pre><code class=\"language-ps\">\n$credentials = (Get-Credential)\n\nConnect-PnPOnline -Url https://contoso.sharepoint.com/sites/somesite -Credentials $credentials\n\nAdd-PnPFieldFromXml &#39;&lt;Field ID=&quot;{61cbb965-1e04-4273-b658-eedaa662f48d}&quot; Type=&quot;TargetTo&quot; Name=&quot;Target_x0020_Audiences&quot; StaticName=&quot;Target_x0020_Audiences&quot; DisplayName=&quot;Target Audiences&quot; /&gt;&#39; -List Documents</code></pre>\n<p>And to do the same thing in C# CSOM</p>\n<pre><code class=\"language-cs\">\n// from SharePointPnPCoreOnline Nuget package\nvar manager = new OfficeDevPnP.Core.AuthenticationManager();\n\nstring siteUrl = &quot;https://contoso.sharepoint.com/sites/somesite&quot;;\nstring appId = &quot;your-app-id&quot;;\nstring appSecret = &quot;your-app-secret&quot;;\n\nusing (var context = manager.GetAppOnlyAuthenticatedContext(siteUrl, appId, appSecret))\n{\n\n    var list = context.Web.Lists.GetByTitle(&quot;Documents&quot;);\n\n    var fieldSchemaXml = @&quot;\n        &lt;Field \n            ID=&#39;{61cbb965-1e04-4273-b658-eedaa662f48d}&#39; \n            Type=&#39;TargetTo&#39; \n            Name=&#39;Target_x0020_Audiences&#39; \n            StaticName=&#39;Target_x0020_Audiences&#39; \n            DisplayName=&#39;Target Audiences&#39; \n        /&gt;\n    &quot;;\n\n    var field = list.Fields.AddFieldAsXml(fieldSchemaXml, false, AddFieldOptions.AddFieldInternalNameHint);\n    context.ExecuteQueryRetry();\n}\n</code></pre>\n<p>To turn off Audience Targeting all you need to do is remove the field from the list.</p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "sharepoint-online",
                   "powershell",
                   "pnp",
                   "development",
                   "code",
                   "c-sharp"
            ],
            "date_published": "2019-07-18T09:26:00+01:00",
            "date_modified": "2021-05-04T09:08:44+01:00"
        },
        {
            "id": "https://wutek.co.uk/showing-a-listview-commandset-if-a-user-is-in-a-sharepoint-group/",
            "url": "https://wutek.co.uk/showing-a-listview-commandset-if-a-user-is-in-a-sharepoint-group/",
            "title": "Showing a ListView CommandSet if a user is in a SharePoint Group",
            "summary": "This post is about creating a ListView CommandSet extension which uses the the onInit method to make âserviceâ calls. If you want to dive straight&hellip;",
            "content_html": "<p>This post is about creating a ListView CommandSet extension which uses the the <code>onInit</code> method to make âserviceâ calls.</p>\n<blockquote>\n<p>If you want to dive straight in, the source code for this post is available from <a href=\"https://github.com/statto1974/my-command-set\">my-command-set GitHub repository</a>.   </p>\n</blockquote>\n<blockquote>\n<p>Full details can be found on creating an <strong>Extension</strong> solution can be found on the <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/building-simple-cmdset-with-dialog-api\">SharePoint Framework Extension Documentation Site</a>, but Iâve given a whistle stop tour below.</p>\n</blockquote>\n<h2 id=\"creating-an-extension-project\">Creating an Extension project</h2>\n<p>This is done using the Yeoman SharePoint Generator in a terminal of your choice.   </p>\n<pre><code>md my-command-set\ncd app-extension\nyo @microsoft/sharepoint</code></pre><p>Enter the following options</p>\n<pre><code>? What is your solution name? my-command-set\n? Which baseline packages... ? SharePoint Online only (latest)\n? Where do you ... files? Use the current folder\n? Do you want ... tenant admin ... in sites? No\n? Will the components ... APIs ... tenant? No\n? Which type of client-side component to create? Extension\n? Which type of client-side extension to create? ListView Command Set\nAdd new Command Set to solution my-command-set.\n? What is your Command Set name? SecurableCommandSet\n? What is your Command Set description? SecurableCommandSet description</code></pre><p>Wait for Yeoman to do itâs thingâ¦</p>\n<p>And then wait a little longerâ¦</p>\n<p>I use <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> so if youâre joining me on this journeyâ¦</p>\n<pre><code>code .</code></pre><p>Hopefully youâll see these files in your repo</p>\n<p>{% asset_img âprj-files.jpgâ âProject Filesâ %}  </p>\n<p>First of all lets setup the CommandSet in the manifest.</p>\n<ul>\n<li>Navigate to <strong>src\\extensions\\securableCommandSet</strong> folder</li>\n<li>Open the <strong>SecurableCommandSetCommandSet.manifest.json</strong> file</li>\n</ul>\n<h2 id=\"updating-the-project-files\">Updating the project files</h2>\n<p>Remove the two commands that were created with the project</p>\n<pre><code class=\"language-js\">&quot;items&quot;: {\n  &quot;COMMAND_1&quot;: {\n    &quot;title&quot;: { &quot;default&quot;: &quot;Command One&quot; },\n    &quot;iconImageUrl&quot;: &quot;icons/request.png&quot;,\n    &quot;type&quot;: &quot;command&quot;\n  },\n  &quot;COMMAND_2&quot;: {\n    &quot;title&quot;: { &quot;default&quot;: &quot;Command Two&quot; },\n    &quot;iconImageUrl&quot;: &quot;icons/cancel.png&quot;,\n    &quot;type&quot;: &quot;command&quot;\n  }\n}</code></pre>\n<p>Replace them with the command thatâs going to be secured</p>\n<pre><code class=\"language-js\">&quot;items&quot;: {\n  &quot;CMD_SECURE&quot;: {\n    &quot;title&quot;: { &quot;default&quot;: &quot;Secret Command&quot; },\n    &quot;iconImageUrl&quot;: &quot;data:image...&quot;,\n    &quot;type&quot;: &quot;command&quot;\n  }\n}</code></pre>\n<p><em>Full base64-encoded image is included with source code</em></p>\n<p>Next open up <strong>SecurableCommandSetCommandSet.ts</strong></p>\n<p>Add a private field to the classe to store the visibility of the command.</p>\n<pre><code class=\"language-ts\">private isInOwnersGroup: boolean = false;</code></pre>\n<p>We want to make sure the command is only visible to people who are in the Owners group of the site we are in. </p>\n<p>This is done in the <code>onListViewUpdated</code> method of the <code>SecurableCommandSetCommandSet</code> class.</p>\n<p>Below is the code added when the project is created.</p>\n<pre><code class=\"language-ts\">@override\npublic onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void {\n  const compareOneCommand: Command = this.tryGetCommand(&#39;COMMAND_1&#39;);\n  if (compareOneCommand) {\n    // This command should be hidden unless exactly one row is selected.\n    compareOneCommand.visible = event.selectedRows.length === 1;\n  }\n}</code></pre>\n<p>Replace it with following</p>\n<pre><code class=\"language-ts\">@override\npublic onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void {\n  const compareSecureCommand: Command = this.tryGetCommand(&#39;CMD_SECURE&#39;);\n  if (compareSecureCommand) {\n\n    compareSecureCommand.visible = this.isInOwnersGroup;\n  }\n\n}</code></pre>\n<p>Install the PnP client side libraries as weâre going to need some of their magic in this solution</p>\n<pre><code>npm i @pnp/sp @pnp/common @pnp/logging @pnp/odata --save</code></pre><p>SharePoint Groups and their members arenât available in the <code>BaseListViewCommandSet.context</code> property, so weâre going to need to load them.</p>\n<p>The problem is that this will have to be done using Promises and <code>onListViewUpdated</code> doesnât return a promise.</p>\n<p>Luckily we have the <code>onInit</code> method for this (returns <code>Promise&lt;void&gt;</code>). This method gets called when you component is initialised (Basically when the list view is loaded up in the page). Anything in the <code>onInit</code> method will run before the commands are rendered, similar to the actions youâd run in the <code>componentWillMount</code> method of a react component.</p>\n<p>To use the pnpjs library it needs to be initialised first and this needs to be done in the <code>onInit</code> method.</p>\n<p>Add the import statement</p>\n<pre><code class=\"language-ts\">import { sp } from &quot;@pnp/sp&quot;;</code></pre>\n<p>Replace the <code>onInit</code> method with the following code, this sets up the <code>sp</code> helper with context of the Extension and then to call into the SharePoint Groups in the site, weâre going to have to await away in the <code>onInit</code> method again to call into the site and set the <code>isInOwnersGroup</code> field.</p>\n<pre><code class=\"language-ts\">@override\npublic async onInit(): Promise&lt;void&gt; {\n\n  await super.onInit();\n\n  await sp.setup({ spfxContext: this.context });\n\n  const email: string = this.context.pageContext.user.email;\n  const ownerGroup: SiteGroup = sp.web.associatedOwnerGroup;\n  const users: SPUser[] = await ownerGroup.users.get();\n\n  this.isInOwnersGroup = users.some((user: any) =&gt; user.Email === email);\n\n  return Promise.resolve&lt;void&gt;();\n}</code></pre>\n<blockquote>\n<p>For the observant people out there, you may notice that Iâve declared <code>user</code> as <code>any</code>. For some reason, the users collection returned has UpperCamelCase properties and the TypeScript reference is using lowerCamelCase, which was causing a TypeScript compile error. Hence the <code>user.Email === email</code> rather than <code>user.email === email</code> in the <code>some</code> function call.</p>\n</blockquote>\n<p>In this snippet of code, weâre getting the login of the current user, the associated owner group of the site and then getting the users in the group.</p>\n<p>The <code>some</code> function determines if the user is in the group and itâs result sets the <code>isInOwnersGroup</code>.</p>\n<p>Finally an update is needed on the <code>onListViewUpdated</code> method to show / hide the command.</p>\n<pre><code class=\"language-ts\">const compareSecureCommand: Command = this.tryGetCommand(&#39;CMD_SECURE&#39;);\n\nif (compareSecureCommand) {\n\n  compareSecureCommand.visible = this.isInOwnersGroup;\n}</code></pre>\n<p>Add the new command to the <code>onExecute</code> method to make sure it gets picked up in the <code>switch</code> statement</p>\n<pre><code class=\"language-ts\">switch (event.itemId) {\n  case &#39;CMD_SECURE&#39;:\n    Dialog.alert(&quot;Shhhhhh! It&#39;s a secret...&quot;);\n    break;\n  default:\n    throw new Error(&#39;Unknown command&#39;);\n}\n</code></pre>\n<p>Now weâre ready to <code>gulp serve</code></p>\n<p>Open up <strong>serve.json</strong> in the <strong>config</strong> directory</p>\n<p>Change the two pageUrl properties to a list in your tenant</p>\n<pre><code class=\"language-js\">&quot;pageUrl&quot;: &quot;https://contoso.sharepoint.com/sites/mySite/SitePages/myPage.aspx&quot;</code></pre>\n<blockquote>\n<p>Currently there is a bug in tenants that are on First Release that stops <code>gulp serve</code> working correctly. If you canât see your command then switch to Standard (not always instant!), if it still doesnât work then try deploying without the <code>--ship</code> paramter. See all the details on the <a href=\"https://github.com/SharePoint/sp-dev-docs/issues/3914#issuecomment-508123159\">sp-dev-docs GitHub repository</a></p>\n</blockquote>\n<p>Make sure you account is in the Owners group (It wonât be if you created a âgroupifiedâ team site).</p>\n<p>If all is good your new CommandSet should appear on the top menu and will show the alert message when clicked.</p>\n<p>![âCommand Set menuâ](</p>\n<p>{% asset_img âcmdset.jpgâ âCommand Set menuâ %}</p>\n<p>{% asset_img âdialog.jpgâ âDialogâ %}</p>\n<h2 id=\"summary\">Summary</h2>\n<p>Getting the SharePoint group users is just an example of how you can use the <code>onInit</code> method to call into other services, like custom web apis, MS Graph, etc.</p>\n<p>Remember that this could effect the load time of your command, which may effect the user experience. The context menu may not be on screen for long, so your menu may have not loaded before itâs gone.</p>\n<h2 id=\"useful-links\">Useful Links</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/building-simple-cmdset-with-dialog-api\">Build your first ListView Command Set extension</a></li>\n<li><a href=\"https://www.base64-image.de/\">Convert your images to base64</a></li>\n</ul>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "typescript",
                   "spfx",
                   "sharepoint-online",
                   "extensions",
                   "development",
                   "code"
            ],
            "date_published": "2019-07-08T09:26:00+01:00",
            "date_modified": "2021-05-04T09:30:26+01:00"
        },
        {
            "id": "https://wutek.co.uk/powerpivot-management-dashboard-error-with-infrastructure-server-health-report/",
            "url": "https://wutek.co.uk/powerpivot-management-dashboard-error-with-infrastructure-server-health-report/",
            "title": "PowerPivot Management Dashboard: Error with &quot;Infrastructure - Server Health&quot; report",
            "summary": "When loading this page in Central Administration, I was being presented with a Excel Services error and a correlation ID. Looking at the ULS logs&hellip;",
            "content_html": "<p>When loading this page in Central Administration, I was being presented with a Excel Services error and a correlation ID.</p>\n<p>Looking at the ULS logs I noticed the following error.</p>\n<p><em>Insufficient SQL database permissions for user 'Name: &lt;DOMAIN\\USERNAME&gt; SID:Â &lt;SID-CODE&gt; ImpersonationLevel: None' in database '&lt;DATABASE-NAME&gt;' on SQL Server instance '&lt;SQL-INSTANCE&gt;'. Additional error information from SQL Server is included below.Â  The EXECUTE permission was denied on the object 'proc_ReturnWebFeatures', database '&lt;DATABASE-NAME&gt;', schema 'dbo'.Â 1d0d479c-5a36-c0dc-912b-5bc267b09a0a</em></p>\n<p>The database name was referring to the Content Admin database of Central Administration and the user name was referring to the service application account that the PowerPivot service application had been configured to run under.</p>\n<p>The proc_ReturnWebFeatures stored procedure required the user to be a member of the SPDataAccess role to allow EXECUTE permissions. The service application user wasÂ onlyÂ in theÂ WSS_Content_Application_Pools role.</p>\n<p>If you run the following script, this will grant the correct rights in the database</p>\n<p>$url = \"<a href=\"http://centraladminsite:2013\">http://centraladminsite:2013</a>\"<br />\n$webApp = Get-SPWebApplication -Identity $url<br />\n$webApp.GrantAccessToProcessIdentity(\"DOMAIN\\serviceapplicationuser\")</p>\n<p>Now when you load up the PowerPivot Management Dashboard, you report should be displayed.</p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "powershell",
                   "PowerPivot"
            ],
            "date_published": "2013-09-27T10:41:33+01:00",
            "date_modified": "2021-05-04T08:35:19+01:00"
        },
        {
            "id": "https://wutek.co.uk/adding-metadata-navigation-and-per-location-setting-programmatically-to-a-list/",
            "url": "https://wutek.co.uk/adding-metadata-navigation-and-per-location-setting-programmatically-to-a-list/",
            "title": "Adding Metadata navigation and per-location setting programmatically to a list",
            "summary": "This turned out to be harder than I thought. Metadata navigation and per-location views are an little known, but powerful way of making lists more&hellip;",
            "content_html": "<p>This turned out to be harder than I thought.</p>\n<p>Metadata navigation and per-location views are an Â little known, but powerful way of making lists more useful.</p>\n<p>It allows you to assign a default view and others views to a folder, content type or field. My need was to allow users to navigate using a Taxonomy field. Dependent on the selected field, I would like to show different fields using a view.</p>\n<p>The first part is to add the Metadata navigation.</p>\n<p>This is done by creating a hierarchy usingÂ MetadataNavigationHierarchy</p>\n<pre><code class=\"language-csharp\">\n  var list = SPContext.Current.Web.Lists.TryGetList(\"MyList\");\n  var field = list.Fields.TryGetFieldByStaticName(\"MyField\");\n  var settings = MetadataNavigationSettings.GetMetadataNavigationSettings(list);\n  var hierarchy = settings.FindConfiguredHierarchy(field.Id);\n\n  if (hierarchy == null)\n  {\n  \thierarchy = new MetadataNavigationHierarchy(field);\n  \tsettings.AddConfiguredHierarchy(hierarchy);\n  }\n  MetadataNavigationSettings.SetMetadataNavigationSettings(list, settings);\n</code></pre>\n<p>The hard part is adding the settings for the per location views.</p>\n<p>This can only be done by injecting XML into the settings XML. MetadataNavigationSettings is a wrapper class around an XML snippet that is stored in a hidden property of the root folder of the list.</p>\n<p>Have a look at SPList.RootFolder.Properties[\"client_MOSS_MetadataNavigationSettings\"]</p>\n<p>The XML Schema is as follows. Haven't found anything documenting this schema on MSDN yet, so this is just taken from my configuration of my list, so may differ on yours</p>\n<pre><code class=\"language-markup\">\n&lt;MetadataNavigationSettings SchemaVersion=\"1\" IsEnabled=\"True\"\nAutoIndex=\"True\"&gt;\n&lt;NavigationHierarchies&gt;\n&lt;FolderHierarchy HideFoldersNode=\"True\" /&gt;\n&lt;MetadataField FieldID=\"a96cea49-ef78-4bfa-8a69-2c49071155fb\"\nFieldType=\"TaxonomyFieldType\"\nCachedName=\"Legal_x0020_Document_x0020_Category\"\nCachedDisplayName=\"Legal Document Category\"&gt;\n&lt;ViewSettings UniqueNodeId=\"eadcb112-33af-4700-ad11-8e6afbd800e6\"&gt;\n&lt;View ViewId=\"4f4d05f4-046f-4bfa-a37c-170847fd4e34\"\nCachedName=\"My Custom View\" Index=\"0\"\nCachedUrl=\"Store/Forms/My Custom View.aspx\" /&gt;\n&lt;View ViewId=\"a1ab958f-40d5-4e4a-ac3f-a10bc3cd22d2\"\nCachedName=\"My Other Custom View\" Index=\"1\"\nCachedUrl=\"Store/Forms/AllItems.aspx\" /&gt;\n&lt;View ViewId=\"5c9447a3-ff59-419a-92b1-c7f0191d6f82\"\nCachedName=\"Not visisible view\" Index=\"-1\"\nCachedUrl=\"Store/Forms/Not visisible view.aspx\" /&gt;\n&lt;/ViewSettings&gt;\n&lt;/MetadataField&gt;\n&lt;/NavigationHierarchies&gt;\n&lt;KeyFilters /&gt;\n&lt;ManagedIndices&gt;\n&lt;ManagedIndex IndexID=\"a96cea49-ef78-4bfa-8a69-2c49071155fb\"\nIndexFieldName=\"Legal_x0020_Document_x0020_Category\"\nIndexFieldID=\"a96cea49-ef78-4bfa-8a69-2c49071155fb\" /&gt;\n&lt;/ManagedIndices&gt;\n&lt;ViewSettings UniqueNodeId=\"\"&gt;\n&lt;View ViewId=\"a1ab958f-40d5-4e4a-ac3f-a10bc3cd22d2\"\nCachedName=\"All Documents\" Index=\"0\"\nCachedUrl=\"Store/Forms/AllItems.aspx\" /&gt;\n&lt;/ViewSettings&gt;\n&lt;/MetadataNavigationSettings&gt;\n</code></pre>\n<p>The part I'm interested in here is the ViewSettings and View tag. The UniqueId attribute relates to the GUID of the selected Term GUID. So this will show the views defined using the View tag when the Term is selected in the Metadata navigation.</p>\n<p>If a View tag is added with 0 index this will be used as the default view when the term is selected, all other positive numbers will be shown in the order defined as other available views for that Term. Any negatives will not be available (You don't need to add them)</p>\n<p>I used the following code to add these nodes programmaticallty using XLinq</p>\n<p><code class=\"language-csharp\"><br>\nvar list = SPContext.Current.Web.Lists.TryGetList(\"MyList\");<br>\nvar view = list.Views.Cast().SingleOrDefault(v =&gt; v.Title == \"MyView\");<br>\nvar session = new TaxonomySession(SPContext.Current.Site);<br>\nvar field = list.Fields.TryGetFieldByStaticName(\"MyField\");<br>\nvar term = session.GetTerm(\"a96cea49-ef78-4bfa-8a69-2c49071155fb\");<br>\nvar settings = MetadataNavigationSettings.GetMetadataNavigationSettings(list);<br>\nvar doc = XDocument.Parse(settings.SettingsXml);<br>\nvar metaDataField = (from f in doc.Descendants(\"MetadataField\")<br>\nlet fieldId = f.Attribute(\"FieldID\")<br>\nwhere fieldId != null &amp;&amp; fieldId.Value == field.Id.ToString()<br>\nselect f).SingleOrDefault();<br>\nif (metaDataField != null)<br>\n{<br>Â  var viewSettings = (from v in metaDataField.Elements(\"ViewSettings\")<br>Â  let uniqueNodeId = v.Attribute(\"UniqueNodeId\")<br>Â  Â  where uniqueNodeId != null &amp;&amp; uniqueNodeId.Value == term.Id.ToString()<br>Â  Â  select v).SingleOrDefault();<br>Â  if (viewSettings == null)<br>Â  {<br>\nmetaDataField.Add(<br>\nnew XElement(\"ViewSettings\",<br>\nnew XAttribute(\"UniqueNodeId\", term.Id.ToString()),<br>\nnew XElement(\"View\",<br>\nnew XAttribute(\"ViewId\", view.ID.ToString()),<br>\nnew XAttribute(\"CachedName\", view.Title),<br>\nnew XAttribute(\"Index\", \"0\"),<br>\nnew XAttribute(\"CachedUrl\", view.Url)<br>\n)<br>\n)<br>\n);<br>\n}<br>\n}<br>\nsettings = new MetadataNavigationSettings(doc.ToString());<br>\nMetadataNavigationSettings.SetMetadataNavigationSettings(list, settings);<br>\n</code></p>",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "Taxonomy",
                   "SharePoint2010",
                   "Metadata"
            ],
            "date_published": "2013-03-21T11:57:38+00:00",
            "date_modified": "2021-05-04T10:38:00+01:00"
        },
        {
            "id": "https://wutek.co.uk/updating-the-version-property-of-a-field-to-the-version-attribute-in-the-fields-schemaxml/",
            "url": "https://wutek.co.uk/updating-the-version-property-of-a-field-to-the-version-attribute-in-the-fields-schemaxml/",
            "title": "Updating the Version property of a field to the Version attribute in the fields SchemaXml",
            "summary": "THIS IS VERY BAD. WE ALL KNOW THAT MAKING DIRECT UPDATES TO THE DATABASE WILL CREATE SOME SORT OF BLACK HOLE AND KITTENS DIE IN&hellip;",
            "content_html": "<p><strong><span style=\"color:#ff6600;\">THIS IS VERY BAD. WE ALL KNOW THAT MAKING DIRECT UPDATES TO THE DATABASE WILL CREATE SOME SORT OF BLACK HOLE AND KITTENS DIE IN REDMOND ETC, ETC. I HAVEN'T TESTED THE LONG TERM EFFECTS AND ONLY DID THIS ON MY DEVELOPMENT ENVIRONMENT TO GET ME OUT OF A PICKLE.</span></strong></p>\n<p>Disclaimer over.</p>\n<p>If you ever get this error when trying to update a field, either through the web UI orÂ programmatic-allyÂ Â it normally means your Version fields are out of sync. This can occur if your field has been created using the Schema XML from another environment or you have migrated content using some dodgy 3rd party app.</p>\n<p>Run this update on your content databases and you all should be good again.<br />\n<code><br />\nUPDATE [MyContentDatabase].[dbo].[ContentTypes]<br />\nSET [Version] = CAST([Definition] AS XML).value('(/Field/@Version)[1]', 'int')<br />\nWHERE CAST([Definition] AS XML).value('(/Field/@Version)[1]', 'int') &lt;&gt; [Version]<br />\n</code></p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "never",
                   "hack",
                   "database",
                   "SharePoint"
            ],
            "date_published": "2013-01-31T15:04:54+00:00",
            "date_modified": "2021-05-04T08:35:19+01:00"
        },
        {
            "id": "https://wutek.co.uk/traversing-taxonomy-terms-from-branch-to-leaf/",
            "url": "https://wutek.co.uk/traversing-taxonomy-terms-from-branch-to-leaf/",
            "title": "Traversing Taxonomy Terms from branch to leaf",
            "summary": "I had a need to show the path of terms, starting from a specific term and then showing the path to the final children, This&hellip;",
            "content_html": "<p>I had a need to show the path of terms, starting from a specific term and then showing the path to the final children,</p>\n<p>This would involve traversing the structure as the depth is unknown, so I wrote this piece of code to accomplish this using the Client Components.</p>\n<p>Please feel free to steal and improve (Only if you give back the improved code though!)</p>\n<p>private <span style=\"color:#99ccff;\">IEnumerable</span>&lt;<span style=\"color:#99ccff;\">Path</span>&gt; Paths(<span style=\"color:#3366ff;\">bool</span> includeRoot, <span style=\"color:#99ccff;\">Guid</span> termId, <span style=\"color:#3366ff;\">string</span> siteUrl)<br />\n{<br />\n<span style=\"color:#3366ff;\">var</span> paths = <span style=\"color:#3366ff;\">new</span> List&lt;Path&gt;();<br />\nAction&lt;ClientContext, Term, String&gt; traverse = <span style=\"color:#3366ff;\">null</span>;</p>\n<p>traverse = (context, term, path) =&gt;<br />\n{<br />\ncontext.Load(term, t =&gt; t.Id, t =&gt; t.Name, t =&gt; t.Terms);<br />\ncontext.ExecuteQuery();</p>\n<p><span style=\"color:#3366ff;\">if</span> (!(term.Id == termId &amp;&amp; !includeRoot))<br />\npath += path == <span style=\"color:#3366ff;\">string</span>.Empty ? term.Name : <span style=\"color:#993300;\">\" &gt; {0}\"</span>.ToFormat(term.Name);</p>\n<p>if (term.Terms.Count == 0)<br />\n{<br />\npaths.Add(<span style=\"color:#3366ff;\">new</span> <span style=\"color:#99ccff;\">Path</span><br />\n{<br />\nTermId = term.Id,<br />\nPathText = path<br />\n});<br />\n}<br />\n<span style=\"color:#3366ff;\">else</span><br />\n{<br />\n<span style=\"color:#3366ff;\">foreach</span> (<span style=\"color:#3366ff;\">var</span> st <span style=\"color:#3366ff;\">in</span> term.Terms)<br />\n{<br />\ntraverse(context, st, path);<br />\n}<br />\n}<br />\n};</p>\n<p><span style=\"color:#3366ff;\">using</span> (<span style=\"color:#3366ff;\">var</span> context = <span style=\"color:#3366ff;\">new</span> <span style=\"color:#99ccff;\">ClientContext</span>(siteUrl))<br />\n{<br />\nvar rootTerm = <span style=\"color:#99ccff;\">TaxonomySession</span>.GetTaxonomySession(context).GetTerm(termId);</p>\n<p>traverse(context, rootTerm, <span style=\"color:#3366ff;\">string</span>.Empty);<br />\n}</p>\n<p><span style=\"color:#3366ff;\">return</span> paths;<br />\n}</p>\n<p><span style=\"color:#3366ff;\">public class</span> <span style=\"color:#00ccff;\">Path</span><br />\n{<br />\n<span style=\"color:#3366ff;\">public</span> <span style=\"color:#00ccff;\">Guid</span> TermId { <span style=\"color:#3366ff;\">get</span>; <span style=\"color:#3366ff;\">set</span>; }<br />\n<span style=\"color:#3366ff;\">public</span> <span style=\"color:#3366ff;\">string</span> PathText { <span style=\"color:#3366ff;\">get</span>; <span style=\"color:#3366ff;\">set</span>; }<br />\n}</p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "terms",
                   "sharepoint 2013",
                   "client components"
            ],
            "date_published": "2013-01-29T10:15:47+00:00",
            "date_modified": "2021-05-04T08:35:19+01:00"
        },
        {
            "id": "https://wutek.co.uk/field-in-list-not-available-in-listitem-using-managed-client-object-model/",
            "url": "https://wutek.co.uk/field-in-list-not-available-in-listitem-using-managed-client-object-model/",
            "title": "Field in List not available in ListItem using Managed Client Object Model",
            "summary": "If you have a field called \"Folder\" it will not be available in the returned ListItem object e.g. listItem[\"Folder\"].ToString() The inner workings of the ListItem&hellip;",
            "content_html": "<p>If you have a field called \"Folder\" it will not be available in the returned ListItem object</p>\n<p>e.g. listItem[\"Folder\"].ToString()</p>\n<p>The inner workings of the ListItem object uses an ExpandoObject to store the properties. It seems it mixes this up in the FieldValues Collection with all your custom fields. The Folder property then takes the value from the FieldValues collection to make it available to the Folder property. Thus making your own Folder field \"disappear\"</p>\n<p>Here is how you can replicate it.</p>\n<ul>\n<li>Create a list based on the Custom List template</li>\n<li>Add a column called \"Folder\" and make it a text field</li>\n<li>Add a column called \"DisplayName\" and make it a text field</li>\n<li>Add a column called \"MyField\" and make it a text field</li>\n</ul>\n<p>Add a couple of dummy rows of data</p>\n<p>Create a console application in VS that referencesÂ Microsoft.SharePoint.Client andÂ Microsoft.SharePoint.Client.Runtime</p>\n<p>Add the following code to the Main method</p>\n<pre>using (var context = new ClientContext(\"http://siteurl\"))\n{\n  var query = CamlQuery.CreateAllItemsQuery();\n  var listItems = context.Web.Lists.GetByTitle(\"Testing\").GetItems(query);\n\n  context.Load(listItems);\n  context.ExecuteQuery();\n\n  foreach (var listItem in listItems)\n  {\n    Console.WriteLine(\"Title: {0}\", listItem[\"Title\"]);\n    Console.WriteLine(\"Folder: {0}\", listItem[\"Folder\"]);\n    Console.WriteLine(\"DisplayName: {0}\", listItem[\"DisplayName\"]);\n    Console.WriteLine(\"MyField: {0}\", listItem[\"MyField\"]);\n  }\n}</pre>\n<p>Here is the code from .Net Reflector that shows the ListItem object populating the properties. It's also worth noting that the other properties detailed in this method will have the same problem, but it's unlikely that you'll call a field FileSystemObject!</p>\n<pre>protected override bool InitOnePropertyFromJson(string peekedName, JsonReader reader)\n    {\n        bool flag = base.InitOnePropertyFromJson(peekedName, reader);\n        if (!flag)\n        {\n            switch (peekedName)\n            {\n                case \"AttachmentFiles\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"AttachmentFiles\", this.AttachmentFiles, reader);\n                    this.AttachmentFiles.FromJson(reader);\n                    return flag;\n\n                case \"ContentType\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"ContentType\", this.ContentType, reader);\n                    this.ContentType.FromJson(reader);\n                    return flag;\n\n                case \"DisplayName\":\n                    flag = true;\n                    reader.ReadName();\n                    base.ObjectData.Properties[\"DisplayName\"] = reader.ReadString();\n                    return flag;\n\n                case \"EffectiveBasePermissions\":\n                    flag = true;\n                    reader.ReadName();\n                    base.ObjectData.Properties[\"EffectiveBasePermissions\"] = reader.Read&lt;BasePermissions&gt;();\n                    return flag;\n\n                case \"EffectiveBasePermissionsForUI\":\n                    flag = true;\n                    reader.ReadName();\n                    base.ObjectData.Properties[\"EffectiveBasePermissionsForUI\"] = reader.Read&lt;BasePermissions&gt;();\n                    return flag;\n\n                case \"FieldValuesAsHtml\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"FieldValuesAsHtml\", this.FieldValuesAsHtml, reader);\n                    this.FieldValuesAsHtml.FromJson(reader);\n                    return flag;\n\n                case \"FieldValuesAsText\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"FieldValuesAsText\", this.FieldValuesAsText, reader);\n                    this.FieldValuesAsText.FromJson(reader);\n                    return flag;\n\n                case \"FieldValuesForEdit\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"FieldValuesForEdit\", this.FieldValuesForEdit, reader);\n                    this.FieldValuesForEdit.FromJson(reader);\n                    return flag;\n\n                case \"File\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"File\", this.File, reader);\n                    this.File.FromJson(reader);\n                    return flag;\n\n                case \"FileSystemObjectType\":\n                    flag = true;\n                    reader.ReadName();\n                    base.ObjectData.Properties[\"FileSystemObjectType\"] = reader.ReadEnum&lt;FileSystemObjectType&gt;();\n                    return flag;\n\n                case \"Folder\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"Folder\", this.Folder, reader);\n                    this.Folder.FromJson(reader);\n                    return flag;\n\n                case \"Id\":\n                    flag = true;\n                    reader.ReadName();\n                    base.ObjectData.Properties[\"Id\"] = reader.ReadInt32();\n                    return flag;\n\n                case \"ParentList\":\n                    flag = true;\n                    reader.ReadName();\n                    base.UpdateClientObjectPropertyType(\"ParentList\", this.ParentList, reader);\n                    this.ParentList.FromJson(reader);\n                    return flag;\n            }\n        }\n        return flag;\n    }</pre>\n<p>Here's a <a href=\"http://social.technet.microsoft.com/Forums/en-US/sharepointdevelopment/thread/275af5b9-eafa-4210-b7de-7e8a9f0cf88f\">link in TechNet Forums to the initial discussion</a> and a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/sharepointdevelopment/thread/076dcf40-ec57-42ed-9232-1224a0fd5e26/\">link to the reported bug</a></p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "client components"
            ],
            "date_published": "2013-01-25T15:17:29+00:00",
            "date_modified": "2021-05-04T08:35:19+01:00"
        },
        {
            "id": "https://wutek.co.uk/the-tale-of-two-ampersands-in-a-taxonomy-term/",
            "url": "https://wutek.co.uk/the-tale-of-two-ampersands-in-a-taxonomy-term/",
            "title": "The tale of two ampersands in a Taxonomy term",
            "summary": "There are two types of ampersands that you need to be aware of when playing with SharePoint Taxonomy OurÂ favoriteÂ and most loved And the impostor After&hellip;",
            "content_html": "<p>There are two types of ampersands that you need to be aware of when playing with SharePoint Taxonomy</p>\n<p>OurÂ favoriteÂ and most loved</p>\n<h1>&amp; ASCII Number: 38</h1>\n<p>And the impostor</p>\n<h1>ï¼ ASCII Number: 65286</h1>\n<p>After reading <a title=\"this article\" href=\"http://nickhobbs.wordpress.com/2012/03/29/sharepoint-2010-managed-metadata-converts-ampersand-and-double-quotes-to-unicode/\" target=\"_blank\">this article</a> by <a title=\"Nick Hobbs\" href=\"http://nickhobbs.wordpress.com/\" target=\"_blank\">Nick Hobbs</a>, it became apparent that when you create a term it replaces the 38 ampersand with a 65286 ampersand.</p>\n<p>This then becomes a problem if you want to do a comparison with your original source (spreadsheet, database, etc) as they are no longer the same.</p>\n<p>As detailed in Nick's article, you can use the TaxonomyItem.NormalizeName method to create a \"Taxonomy\" version of your string for comparison.</p>\n<p>Below is the code I used in the SharePoint 2013 Client Component which is a little different from the server code.</p>\n<p><span style=\"color:#3366ff;\">string</span> myString =<span style=\"color:#993300;\"> \"This contains &amp;\"</span>;<br />\n<span style=\"color:#3366ff;\">using</span> (var context = new ClientContext(<span style=\"color:#993300;\">\"http://myurl\"</span>))<br />\n{<br />\n<span style=\"color:#3366ff;\">var</span> result = <span style=\"color:#33cccc;\">TaxonomyItem</span>.NormalizeName(context, myString);<br />\ncontext.ExecuteQuery();</p>\n<p><span style=\"color:#3366ff;\">string</span> normalisedString = result.Value;<br />\n}</p>\n",
            "author": {
                "name": "Toby Statham"
            },
            "tags": [
                   "sharepoint 2013",
                   "client components"
            ],
            "date_published": "2013-01-14T16:28:25+00:00",
            "date_modified": "2021-05-04T08:35:19+01:00"
        }
    ]
}
